import { Blog } from './pages/Blog.jsx' 
import { Signup } from './pages/Signup.jsx'
import { Login } from './pages/Login.jsx'
import { useLoaderData } from 'react-router-dom'
import { getPosts } from './api/posts.js'
import { QueryClient, 
    dehydrate, 
    HydrationBoundary,
    } from '@tanstack/react-query'
import { getUserInfo } from './api/users.js' 

//import PropTypes from 'prop-types'
import { ViewPost } from './pages/ViewPost.jsx'

export const routes = [

    {
        path: '/posts/:postId',
        loader: async ({ params }) => {
            const postId = params.postId
            const queryClient = new QueryClient()
            const post = await getPostById(postId)
            await queryClient.prefetchQuery({
                queryKey: ['post', postId],
                queryFn: () => post,
            })
            if (post?.author){
                await queryClient.prefetchQuery({
                    queryKey: ['users', post.author],
                    queryFn: () => getUserInfo(post.author),
                })
            }
            return { dehydratedState: dehydrate(queryClient), postId }
        },
        Component() {
            const { dehydratedState, postId } = useLoaderData()
            return (
                <HydrationBoundary state={dehydratedState}>
                    <ViewPost postId={postId} />
                </HydrationBoundary>
            )
        },
    },
    //ViewPost.propTypes = {
    //    postId: PropTypes.string.isRequired,
    //}
]